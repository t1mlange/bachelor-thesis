
    Theory
    In the first part of this chapter, we define the flow functions and in the second part we discuss the time complexity of taint analysis specificly hightlighting differences between forward and backward analysis.

    Flow Functions
    In this section, we describe the behavior of the flow functions based on the Jimple language and define semi-formal rules.

    Normal Flow    Normal flow functions handle every statement that does not contain an InvokeExpr. The only case where a new taint can be produced is at an AssignStmt. It is straight-forward that this is true for statements like IfStmt if we recall s:jimple. The conditition is either an UnopExpr or BinopExpr of which both have no effect on the taint set. But we also skip over IdentityStmt even though they define a value. This is because we wait for the return site to map all parameters back into the callee.

    Now, lets consider the current statement is an AssignStmt. It consists of a variable, either a reference or a local, on the left side and an expression on the right side. Jimple ensures we just see one field reference at a time but to reduce the semi-formal rules, we take a shortcut here. So our assigment has the structure  with  modelling a possible field reference. Note that the taints can have an access path of an arbitrary length  which is denoted as .

    First, we look at the case when the access path matches exactly. Either we have a local () or a field reference () on the left. In the first case, the base of our taint needs to match and in the latter, the first field must also match. If the field references another heap object, we might encounter a non-empty access path . This access path needs to be added to the newly created taint. We conclude:
    
        [] Rule 1: An incoming taint  with  produces the outflowing taint set .
     

    Next, we might encounter a whole object tainted. In this case, just the base needs to match but the left side is also kept alive because other fields also might be tainted if the object has more than one field.
    
        [] Rule 2: An incoming taint  with  produces the outflowing taint set .
     

    Lastly, the right side could also be tainted. This rule is equivalent to the default behaivor but is important later when we consider aliasing in s:aliasing.
    
        [] Rule 3: An incoming taint  with  produces the outflowing taint set .
    

    Whenever the taint neither matches on the left nor on the right side, we propagate it further untouched.

    Rule 1 and Rule 3 also work with  appended.

    Call Flow
    For call statements, we have statements of the structure  with .  denotes the -th argument,  the -th parameter and  the class the method is defined in.

    If we encounter a tainted argument in the caller, the taint need to go through the callee. Due to the backwards direction this is only true for heap objects because only they have references. For primitives or strings we already know the tainted value is not visible in the callee.
    
        [] Rule 1: An incoming taint  with  produces the outflowing taint set .
    
    If the object the method is called on is tainted, the tainted path is visible inside the callee. The callee must be not static.
    
        [] Rule 2: An incoming taint  with  produces the outflowing taint set . 
        
    Tainted static fields are propagated untouched and unconditionally in the callee as they are always visible.
    
        [] Rule 3: An incoming taint  with  produces the outflowing taint set . 
    
    Next, if the call statement is also an assign statement and the left side is tainted we also need to taint the return value. Methods can have multiple return statements and as we traverse the reversed interprocedural control flow graph, we need to taint all possible return values. The structure of the statement is in this case .  denotes a return value.  is the number of return statements in the callee. 
    
        [] Rule 4: An incoming taint  with  produces the outflowing taint set . 
    
    The taint is killed if it is not matched inside a rule. Instead, it is propagated over the call statement in the CallToReturn flow function.
    Return Flow
    All taints reaching the end of a callee need to be mapped back into the caller. The statement is of the structure  with .  denotes the -th argument,  the -th parameter and  the class the method is defined in.

    First, we match rule 1 of call flow and map all parameters back into the caller. This time even primitives are mapped back because if we find a tainted value at the start of the method it had to be passed as an argument into the method.
    
        [] Rule 1: An incoming taint  with  produces the outflowing taint set .
    
    The  reference is visible in the caller. This is the reverse of rule 2 in call flow.
    
        [] Rule 2: An incoming taint  with  produces the outflowing taint set . 
        
    Tainted static fields are also mapped back untouched and unconditionally equivalent to rule 3 in call flow.
    
        [] Rule 3: An incoming taint  with  produces the outflowing taint set . 
    
    The taint is killed if it is not matched in a rule.
    CallToReturn Flow
    As already seen in call flow, not every taint is visible inside a callee. 
    Again, the statement structure is  with .  denotes the -th argument.

    If the taint neither matches an argument nor the object the method is called on, it is not visible in the callee. Static fields are always visible and thus can not propagated over a statement.
    
        [] Rule 1: An incoming taint  with  produces the outflowing taint set . 
    
    If a taint is limited to its base, so no fields are tainted, the taint is also propagated over the statement as the reference is passed by copy-by-value and assigments to the parameter overwrites the reference in the callee but has no effect on the reference in the caller.
    
        [] Rule 2: An incoming taint  with  produces the outflowing taint set . 
            

    Complexity of Data Flow Analysis    IFDS has a time-complexity of . The edges in the control-flow graph are set by the to-be-analyzed app. The domain depends on the tainted variables observed by the IFDS analysis. Arzt et al evaluation of FlowDroid shows no correlation between a-priori known parameters and the runtime of the analysis. So, we are left with the number of taint propagations as the only parameter correlated to the runtime but they are only known afterwards. 

    The number of taint propagations depends on two factors: the lifetime of taints and the number of taints. Both factors highly depend on the search direction which we will explain in the following paragraphs.

    
                max width=
            [gobble=16]
                String returnParam(int i, String s1, String s2, String s3) 
                    if (i == 1)
                        return s1;
                    else if (i == 2)
                        return s2;
                    else if (i == 3)
                        return s3;
                    else
                        return "default";
                
                
                Branching Factor Example
            
    First, we take a look at the is the branching factor. The branching factor describes the number outgoing edges from a node. A smaller branching factor is favorable.   
    Think of binary operator expression such as int c = a + b;, backwards we can not argue which operand is responsible for the tainted output and thus proceed with both operands tainted. The same restriction is present in rule 4 of Call Flow which describes how the returned value is mapped back into the callee. This time the branching factor can be even larger. As an example, in lst:branching is a method which conditionally returns one of its parameters and is part of the leak path. Lets assume the returned value of a call to returnParam() is tainted. Backwards, every returned operand is tainted and later on mapped according to Return Flow rule 2 back into the caller. Thus, the IFDS algorithm ends up with a summary . Forwards, a tainted parameter is mapped into the callee and later on returned to the caller resulting in a summary  with . Such a case favors forwards analysis.

    In contrast, a strict right-to-left flow favors backwards analysis as backwards taints are killed more often due to a stronger overwrite rule meaning a shorter lifetime per taint. In tikz:rtol is such a right-to-left flow displayed. Forwards, the right hand side is always kept alive because it still holds the tainted value below the statement and could be leaked. Starting at the sinks this fact can be confidently ignored because the fact is known to be not on a leak path.
    
    
                [b]0.45
                        
            Forwards
                                    [b]0.45
                              
            Backwards
              
                Right-to-Left Order
            
    Static field taints are a special case and an issue in both directions. Their scope is global, so a static field can be accessed anywhere in the code. Thus such a taint needs to be propagated into every method and can only be killed on overwrite.

    In special cases of application, the direction of the dtaflow analysis might be more important. We bring in classical web-oriented applications as an example. Typical vulnerabilities such as cross-site-scripting and SQL injection occur because untrusted user input was not validated. Normally the content is escaped right before output or sanitized before execution of the command, respectively. So the sanitization method is expected to be close to the sink. Being able to kill taints ealier is advantageous and therefore backwards analysis should be the better choice.

    We discussed cases where one direction is better than the other but it still highly depends on the analyzed app. 

    
        Number of taints
        
            There seems to be no correlation between source count and analysis time
            Probably also holds for sinks?
            There might be indicator for a single app whether it is better to start at sources or sinks
            


