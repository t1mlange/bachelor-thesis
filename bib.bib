% Encoding: UTF-8

@Book{Aho1986,
  author       = {Aho, Alfred V. and Sethi, Ravi and Ullman, Jeffrey D.},
  publisher    = {Reading, Mass. : Addison-Wesley Pub. Co.},
  title        = {Compilers, principles, techniques, and tools},
  year         = {1986},
  isbn         = {9780201100884},
  abstract     = {Bibliography: p. [752]-779; Includes index},
  collaborator = {{Internet Archive}},
  keywords     = {Compilers (Computer programs)},
  language     = {eng},
  url          = {http://archive.org/details/compilersprincip00ahoa},
  urldate      = {2021-02-15},
}

@Book{Thain2019,
  author    = {Thain, Douglas},
  publisher = {Lulu.com},
  title     = {Introduction to {Compilers} and {Language} {Design}},
  year      = {2019},
  isbn      = {9780359138043},
  month     = jul,
  note      = {Google-Books-ID: 5mVyDwAAQBAJ},
  abstract  = {A compiler translates a program written in a high level language into a program written in a lower level language. For students of computer science, building a compiler from scratch is a rite of passage: a challenging and fun project that offers insight into many different aspects of computer science, some deeply theoretical, and others highly practical. This book offers a one semester introduction into compiler construction, enabling the reader to build a simple compiler that accepts a C-like language and translates it into working X86 or ARM assembly language. It is most suitable for undergraduate students who have some experience programming in C, and have taken courses in data structures and computer architecture.},
  file      = {Google Books Link:https\://books.google.de/books?id=5mVyDwAAQBAJ:text/html},
  keywords  = {Computers / General},
  language  = {en},
}

@PhdThesis{Arzt2017PhD,
  author    = {Arzt, Steven},
  school    = {Technische Universität},
  title     = {Static {Data} {Flow} {Analysis} for {Android} {Applications}},
  year      = {2017},
  address   = {Darmstadt},
  abstract  = {Mobile phones have become important daily companions for millions of people which help to organize both their private and their professional lives. Having access to data such as the calendar or the address book anywhere, anytime, has become commonplace. Sensor data such as the phone's GPS location and accelerometer help users navigate through the physical world. Users can furthermore extend the functionality of their phone using small programs called apps from various developers and vendors in an open ecosystem. Undoubtedly, having all this data merged on a device that is always-on and always-connected and that can easily be extended with new software greatly improves user convenience. On the other hand, it also poses new questions with regard to privacy and security. Apps may misuse the data stored on the phone or obtained from the sensors to infringe upon the user's privacy. In fact, companies already now use location data and app usage statistics to build user profiles for the purpose of targeted advertisement. The user is oftentimes unaware of these data leaks originating from his phone and has little means for analyzing the actual behavior of a given app with regard to privacy.

Static data flow analysis has been proposed as a means for automatically enumerating the data flows inside a program. Still, either do not support Android's platform-specific semantics or fall short on precision, recall, or scalability. In this thesis, we therefore propose techniques for efficiently and precisely performing static data flow analysis on real-world binary-only Android apps with large code sizes. We present the FlowDroid tool and show that it can detect data leaks in popular apps such as Facebook, Paypal, and LinkedIn. The FlowDroid reports improve the user's digital sovereignty by allowing his to asses the behavior of the app before installing it on his device and thereby entrusting it with his personal data. We allow the user to verify which of his data leaves the device and how. On the DroidBench micro-benchmark suite, we show that FlowDroid achieves a precision of more than 87\% and a recall of over 84\%, thereby outperforming state-of-the-art tools from academia and industry. Additionally, FlowDroid has already been used as a building-block for many other works in the field.},
  copyright = {lediglich die vom Gesetz vorgesehenen Nutzungsrechte gemäß UrhG},
  file      = {Full Text PDF:https\://tuprints.ulb.tu-darmstadt.de/5937/7/Thesis.pdf:application/pdf},
  language  = {en},
  url       = {https://tuprints.ulb.tu-darmstadt.de/5937/},
  urldate   = {2021-01-28},
}

@InProceedings{Lerch2015,
  author    = {Johannes Lerch and Ben Hermann},
  booktitle = {Proceedings of the 4th {ACM} {SIGPLAN} International Workshop on State Of the Art in Program Analysis},
  title     = {Design your analysis: a case study on implementation reusability of data-flow functions},
  year      = {2015},
  month     = {jun},
  publisher = {{ACM}},
  doi       = {10.1145/2771284.2771289},
}

@InProceedings{Reps1995,
  author    = {Thomas Reps and Susan Horwitz and Mooly Sagiv},
  booktitle = {Proceedings of the 22nd {ACM} {SIGPLAN}-{SIGACT} symposium on Principles of programming languages - {POPL} {\textquotesingle}95},
  title     = {Precise interprocedural dataflow analysis via graph reachability},
  year      = {1995},
  publisher = {{ACM} Press},
  doi       = {10.1145/199448.199462},
}

@InCollection{Naeem2010,
  author    = {Nomair A. Naeem and Ond{\v{r}}ej Lhot{\'{a}}k and Jonathan Rodriguez},
  booktitle = {Lecture Notes in Computer Science},
  publisher = {Springer Berlin Heidelberg},
  title     = {Practical Extensions to the {IFDS} Algorithm},
  year      = {2010},
  pages     = {124--144},
  doi       = {10.1007/978-3-642-11970-5_8},
}

@Article{Arzt2014,
  author    = {Steven Arzt and Siegfried Rasthofer and Christian Fritz and Eric Bodden and Alexandre Bartel and Jacques Klein and Yves Le Traon and Damien Octeau and Patrick McDaniel},
  journal   = {{ACM} {SIGPLAN} Notices},
  title     = {{FlowDroid}},
  year      = {2014},
  month     = {jun},
  number    = {6},
  pages     = {259--269},
  volume    = {49},
  doi       = {10.1145/2666356.2594299},
  publisher = {Association for Computing Machinery ({ACM})},
}

@Article{Valleerai2004,
  author     = {Vallee-rai, Raja and Hendren, Laurie},
  title      = {Jimple: {Simplifying} {Java} {Bytecode} for {Analyses} and {Transformations}},
  year       = {2004},
  month      = jan,
  abstract   = {In this paper we present Jimple, a 3-address intermediaterepresentation that has been designed tosimplify analysis and transformation of Java bytecode.We motivate the need for a new intermediaterepresentation by illustrating several difficultieswith optimizing the stack-based Java bytecode directly.In general, these difficulties are due to thefact that bytecode instructions affect an expressionstack, and thus have implicit uses and definitions ofstack locations. We propose Jimple as an ...},
  file       = {ResearchGate Link:https\://www.researchgate.net/publication/243776080_Jimple_Simplifying_Java_Bytecode_for_Analyses_and_Transformations:},
  shorttitle = {Jimple},
}

@InProceedings{Bodden2012,
  author    = {Eric Bodden},
  booktitle = {Proceedings of the {ACM} {SIGPLAN} International Workshop on State of the Art in Java Program analysis - {SOAP} {\textquotesingle}12},
  title     = {Inter-procedural data-flow analysis with {IFDS}/{IDE} and Soot},
  year      = {2012},
  publisher = {{ACM} Press},
  doi       = {10.1145/2259051.2259052},
}

@Comment{jabref-meta: databaseType:bibtex;}
